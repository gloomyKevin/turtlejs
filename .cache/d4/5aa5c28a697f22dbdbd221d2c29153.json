{"id":"node_modules/ebnf-parser/ebnf-transform.js","dependencies":[{"name":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/package.json","includedInParent":true,"mtime":1610593622989},{"name":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/ebnf-parser/package.json","includedInParent":true,"mtime":1610593742043},{"name":"./transform-parser.js","loc":{"line":2,"column":25},"parent":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/ebnf-parser/ebnf-transform.js","resolved":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/ebnf-parser/transform-parser.js"}],"generated":{"js":"var EBNF = (function(){\n    var parser = require('./transform-parser.js');\n\n    var transformExpression = function(e, opts, emit) {\n        var type = e[0], value = e[1], name = false;\n\n        if (type === 'xalias') {\n            type = e[1];\n            value = e[2]\n            name = e[3];\n            if (type) {\n                e = e.slice(1,2);\n            } else {\n                e = value;\n                type = e[0];\n                value = e[1];\n            }\n        }\n\n        if (type === 'symbol') {\n            var n;\n            if (e[1][0] === '\\\\') n = e[1][1];\n            else if (e[1][0] === '\\'') n = e[1].substring(1, e[1].length-1);\n            else n = e[1];\n            emit(n + (name ? \"[\"+name+\"]\" : \"\"));\n        } else if (type === \"+\") {\n            if (!name) {\n                name = opts.production + \"_repetition_plus\" + opts.repid++;\n            }\n            emit(name);\n\n            opts = optsForProduction(name, opts.grammar);\n            var list = transformExpressionList([value], opts);\n            opts.grammar[name] = [\n                [list, \"$$ = [$1];\"],\n                [\n                    name + \" \" + list,\n                    \"$1.push($2);\"\n                ]\n            ];\n        } else if (type === \"*\") {\n            if (!name) {\n                name = opts.production + \"_repetition\" + opts.repid++;\n            }\n            emit(name);\n\n            opts = optsForProduction(name, opts.grammar);\n            opts.grammar[name] = [\n                [\"\", \"$$ = [];\"],\n                [\n                    name + \" \" + transformExpressionList([value], opts),\n                    \"$1.push($2);\"\n                ]\n            ];\n        } else if (type ===\"?\") {\n            if (!name) {\n                name = opts.production + \"_option\" + opts.optid++;\n            }\n            emit(name);\n\n            opts = optsForProduction(name, opts.grammar);\n            opts.grammar[name] = [\n                \"\", transformExpressionList([value], opts)\n            ];\n        } else if (type === \"()\") {\n            if (value.length == 1) {\n                emit(transformExpressionList(value[0], opts));\n            } else {\n                if (!name) {\n                    name = opts.production + \"_group\" + opts.groupid++;\n                }\n                emit(name);\n\n                opts = optsForProduction(name, opts.grammar);\n                opts.grammar[name] = value.map(function(handle) {\n                    return transformExpressionList(handle, opts);\n                });\n            }\n        }\n    };\n\n    var transformExpressionList = function(list, opts) {\n        return list.reduce (function (tot, e) {\n            transformExpression (e, opts, function (i) { tot.push(i); });\n            return tot;\n        }, []).\n        join(\" \");\n    };\n\n    var optsForProduction = function(id, grammar) {\n        return {\n            production: id,\n            repid: 0,\n            groupid: 0,\n            optid: 0,\n            grammar: grammar\n        };\n    };\n\n    var transformProduction = function(id, production, grammar) {\n        var transform_opts = optsForProduction(id, grammar);\n        return production.map(function (handle) {\n            var action = null, opts = null;\n            if (typeof(handle) !== 'string')\n                action = handle[1],\n                opts = handle[2],\n                handle = handle[0];\n            var expressions = parser.parse(handle);\n\n            handle = transformExpressionList(expressions, transform_opts);\n\n            var ret = [handle];\n            if (action) ret.push(action);\n            if (opts) ret.push(opts);\n            if (ret.length == 1) return ret[0];\n            else return ret;\n        });\n    };\n\n    var transformGrammar = function(grammar) {\n        Object.keys(grammar).forEach(function(id) {\n            grammar[id] = transformProduction(id, grammar[id], grammar);\n        });\n    };\n\n    return {\n        transform: function (ebnf) {\n            transformGrammar(ebnf);\n            return ebnf;\n        }\n    };\n})();\n\nexports.transform = EBNF.transform;\n\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-transform.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}}],"sources":{"node_modules/ebnf-parser/ebnf-transform.js":"var EBNF = (function(){\n    var parser = require('./transform-parser.js');\n\n    var transformExpression = function(e, opts, emit) {\n        var type = e[0], value = e[1], name = false;\n\n        if (type === 'xalias') {\n            type = e[1];\n            value = e[2]\n            name = e[3];\n            if (type) {\n                e = e.slice(1,2);\n            } else {\n                e = value;\n                type = e[0];\n                value = e[1];\n            }\n        }\n\n        if (type === 'symbol') {\n            var n;\n            if (e[1][0] === '\\\\') n = e[1][1];\n            else if (e[1][0] === '\\'') n = e[1].substring(1, e[1].length-1);\n            else n = e[1];\n            emit(n + (name ? \"[\"+name+\"]\" : \"\"));\n        } else if (type === \"+\") {\n            if (!name) {\n                name = opts.production + \"_repetition_plus\" + opts.repid++;\n            }\n            emit(name);\n\n            opts = optsForProduction(name, opts.grammar);\n            var list = transformExpressionList([value], opts);\n            opts.grammar[name] = [\n                [list, \"$$ = [$1];\"],\n                [\n                    name + \" \" + list,\n                    \"$1.push($2);\"\n                ]\n            ];\n        } else if (type === \"*\") {\n            if (!name) {\n                name = opts.production + \"_repetition\" + opts.repid++;\n            }\n            emit(name);\n\n            opts = optsForProduction(name, opts.grammar);\n            opts.grammar[name] = [\n                [\"\", \"$$ = [];\"],\n                [\n                    name + \" \" + transformExpressionList([value], opts),\n                    \"$1.push($2);\"\n                ]\n            ];\n        } else if (type ===\"?\") {\n            if (!name) {\n                name = opts.production + \"_option\" + opts.optid++;\n            }\n            emit(name);\n\n            opts = optsForProduction(name, opts.grammar);\n            opts.grammar[name] = [\n                \"\", transformExpressionList([value], opts)\n            ];\n        } else if (type === \"()\") {\n            if (value.length == 1) {\n                emit(transformExpressionList(value[0], opts));\n            } else {\n                if (!name) {\n                    name = opts.production + \"_group\" + opts.groupid++;\n                }\n                emit(name);\n\n                opts = optsForProduction(name, opts.grammar);\n                opts.grammar[name] = value.map(function(handle) {\n                    return transformExpressionList(handle, opts);\n                });\n            }\n        }\n    };\n\n    var transformExpressionList = function(list, opts) {\n        return list.reduce (function (tot, e) {\n            transformExpression (e, opts, function (i) { tot.push(i); });\n            return tot;\n        }, []).\n        join(\" \");\n    };\n\n    var optsForProduction = function(id, grammar) {\n        return {\n            production: id,\n            repid: 0,\n            groupid: 0,\n            optid: 0,\n            grammar: grammar\n        };\n    };\n\n    var transformProduction = function(id, production, grammar) {\n        var transform_opts = optsForProduction(id, grammar);\n        return production.map(function (handle) {\n            var action = null, opts = null;\n            if (typeof(handle) !== 'string')\n                action = handle[1],\n                opts = handle[2],\n                handle = handle[0];\n            var expressions = parser.parse(handle);\n\n            handle = transformExpressionList(expressions, transform_opts);\n\n            var ret = [handle];\n            if (action) ret.push(action);\n            if (opts) ret.push(opts);\n            if (ret.length == 1) return ret[0];\n            else return ret;\n        });\n    };\n\n    var transformGrammar = function(grammar) {\n        Object.keys(grammar).forEach(function(id) {\n            grammar[id] = transformProduction(id, grammar[id], grammar);\n        });\n    };\n\n    return {\n        transform: function (ebnf) {\n            transformGrammar(ebnf);\n            return ebnf;\n        }\n    };\n})();\n\nexports.transform = EBNF.transform;\n\n"},"lineCount":136}},"error":null,"hash":"8cfa44287c80aef1e1ae69371c74caf5","cacheData":{"env":{}}}