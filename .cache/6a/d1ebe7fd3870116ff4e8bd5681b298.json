{"id":"node_modules/ebnf-parser/ebnf-parser.js","dependencies":[{"name":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/package.json","includedInParent":true,"mtime":1610593622989},{"name":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/ebnf-parser/package.json","includedInParent":true,"mtime":1610593742043},{"name":"./parser","loc":{"line":1,"column":18},"parent":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/ebnf-parser/ebnf-parser.js","resolved":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/ebnf-parser/parser.js"},{"name":"./ebnf-transform","loc":{"line":2,"column":19},"parent":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/ebnf-parser/ebnf-parser.js","resolved":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/ebnf-parser/ebnf-transform.js"},{"name":"lex-parser","loc":{"line":3,"column":23},"parent":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/ebnf-parser/ebnf-parser.js","resolved":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/lex-parser/lex-parser.js"}],"generated":{"js":"var bnf = require(\"./parser\").parser,\n    ebnf = require(\"./ebnf-transform\"),\n    jisonlex = require(\"lex-parser\");\n\nexports.parse = function parse (grammar) { return bnf.parse(grammar); };\nexports.transform = ebnf.transform;\n\n// adds a declaration to the grammar\nbnf.yy.addDeclaration = function (grammar, decl) {\n    if (decl.start) {\n        grammar.start = decl.start;\n\n    } else if (decl.lex) {\n        grammar.lex = parseLex(decl.lex);\n\n    } else if (decl.operator) {\n        if (!grammar.operators) grammar.operators = [];\n        grammar.operators.push(decl.operator);\n\n    } else if (decl.parseParam) {\n        if (!grammar.parseParams) grammar.parseParams = [];\n        grammar.parseParams = grammar.parseParams.concat(decl.parseParam);\n\n    } else if (decl.include) {\n        if (!grammar.moduleInclude) grammar.moduleInclude = '';\n        grammar.moduleInclude += decl.include;\n\n    } else if (decl.options) {\n        if (!grammar.options) grammar.options = {};\n        for (var i=0; i < decl.options.length; i++) {\n            grammar.options[decl.options[i]] = true;\n        }\n    }\n\n};\n\n// parse an embedded lex section\nvar parseLex = function (text) {\n    return jisonlex.parse(text.replace(/(?:^%lex)|(?:\\/lex$)/g, ''));\n};\n\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ebnf-parser/ebnf-parser.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}}],"sources":{"node_modules/ebnf-parser/ebnf-parser.js":"var bnf = require(\"./parser\").parser,\n    ebnf = require(\"./ebnf-transform\"),\n    jisonlex = require(\"lex-parser\");\n\nexports.parse = function parse (grammar) { return bnf.parse(grammar); };\nexports.transform = ebnf.transform;\n\n// adds a declaration to the grammar\nbnf.yy.addDeclaration = function (grammar, decl) {\n    if (decl.start) {\n        grammar.start = decl.start;\n\n    } else if (decl.lex) {\n        grammar.lex = parseLex(decl.lex);\n\n    } else if (decl.operator) {\n        if (!grammar.operators) grammar.operators = [];\n        grammar.operators.push(decl.operator);\n\n    } else if (decl.parseParam) {\n        if (!grammar.parseParams) grammar.parseParams = [];\n        grammar.parseParams = grammar.parseParams.concat(decl.parseParam);\n\n    } else if (decl.include) {\n        if (!grammar.moduleInclude) grammar.moduleInclude = '';\n        grammar.moduleInclude += decl.include;\n\n    } else if (decl.options) {\n        if (!grammar.options) grammar.options = {};\n        for (var i=0; i < decl.options.length; i++) {\n            grammar.options[decl.options[i]] = true;\n        }\n    }\n\n};\n\n// parse an embedded lex section\nvar parseLex = function (text) {\n    return jisonlex.parse(text.replace(/(?:^%lex)|(?:\\/lex$)/g, ''));\n};\n\n"},"lineCount":42}},"error":null,"hash":"88e164d8ef5f094e8266875674b9eb3e","cacheData":{"env":{}}}