{"id":"node_modules/ebnf-parser/transform-parser.js","dependencies":[{"name":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/package.json","includedInParent":true,"mtime":1610593622989},{"name":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/ebnf-parser/package.json","includedInParent":true,"mtime":1610593742043},{"name":"fs","loc":{"line":623,"column":25},"parent":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/ebnf-parser/transform-parser.js","resolved":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/parcel-bundler/src/builtins/_empty.js"},{"name":"path","loc":{"line":623,"column":52},"parent":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/ebnf-parser/transform-parser.js","resolved":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/path-browserify/index.js"},{"name":"process","parent":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/ebnf-parser/transform-parser.js","resolved":"/Users/yixuan/Desktop/others/javascript-interpreter/1.5/node_modules/process/browser.js"}],"generated":{"js":"var process = require(\"process\");\n/* parser generated by jison 0.4.11 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar ebnf = (function(){\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"production\":3,\"handle\":4,\"EOF\":5,\"handle_list\":6,\"|\":7,\"expression_suffix\":8,\"expression\":9,\"suffix\":10,\"ALIAS\":11,\"symbol\":12,\"(\":13,\")\":14,\"*\":15,\"?\":16,\"+\":17,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",7:\"|\",11:\"ALIAS\",12:\"symbol\",13:\"(\",14:\")\",15:\"*\",16:\"?\",17:\"+\"},\nproductions_: [0,[3,2],[6,1],[6,3],[4,0],[4,2],[8,3],[8,2],[9,1],[9,3],[10,0],[10,1],[10,1],[10,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1: return $$[$0-1]; \nbreak;\ncase 2: this.$ = [$$[$0]]; \nbreak;\ncase 3: $$[$0-2].push($$[$0]); \nbreak;\ncase 4: this.$ = []; \nbreak;\ncase 5: $$[$0-1].push($$[$0]); \nbreak;\ncase 6: this.$ = ['xalias', $$[$0-1], $$[$0-2], $$[$0]]; \nbreak;\ncase 7: if ($$[$0]) this.$ = [$$[$0], $$[$0-1]]; else this.$ = $$[$0-1]; \nbreak;\ncase 8: this.$ = ['symbol', $$[$0]]; \nbreak;\ncase 9: this.$ = ['()', $$[$0-1]]; \nbreak;\n}\n},\ntable: [{3:1,4:2,5:[2,4],12:[2,4],13:[2,4]},{1:[3]},{5:[1,3],8:4,9:5,12:[1,6],13:[1,7]},{1:[2,1]},{5:[2,5],7:[2,5],12:[2,5],13:[2,5],14:[2,5]},{5:[2,10],7:[2,10],10:8,11:[2,10],12:[2,10],13:[2,10],14:[2,10],15:[1,9],16:[1,10],17:[1,11]},{5:[2,8],7:[2,8],11:[2,8],12:[2,8],13:[2,8],14:[2,8],15:[2,8],16:[2,8],17:[2,8]},{4:13,6:12,7:[2,4],12:[2,4],13:[2,4],14:[2,4]},{5:[2,7],7:[2,7],11:[1,14],12:[2,7],13:[2,7],14:[2,7]},{5:[2,11],7:[2,11],11:[2,11],12:[2,11],13:[2,11],14:[2,11]},{5:[2,12],7:[2,12],11:[2,12],12:[2,12],13:[2,12],14:[2,12]},{5:[2,13],7:[2,13],11:[2,13],12:[2,13],13:[2,13],14:[2,13]},{7:[1,16],14:[1,15]},{7:[2,2],8:4,9:5,12:[1,6],13:[1,7],14:[2,2]},{5:[2,6],7:[2,6],12:[2,6],13:[2,6],14:[2,6]},{5:[2,9],7:[2,9],11:[2,9],12:[2,9],13:[2,9],14:[2,9],15:[2,9],16:[2,9],17:[2,9]},{4:17,7:[2,4],12:[2,4],13:[2,4],14:[2,4]},{7:[2,3],8:4,9:5,12:[1,6],13:[1,7],14:[2,3]}],\ndefaultActions: {3:[2,1]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        throw new Error(str);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    this.lexer.setInput(input);\n    this.lexer.yy = this.yy;\n    this.yy.lexer = this.lexer;\n    this.yy.parser = this;\n    if (typeof this.lexer.yylloc == 'undefined') {\n        this.lexer.yylloc = {};\n    }\n    var yyloc = this.lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = this.lexer.options && this.lexer.options.ranges;\n    if (typeof this.yy.parseError === 'function') {\n        this.parseError = this.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    function lex() {\n        var token;\n        token = self.lexer.lex() || EOF;\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (this.lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + this.lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: this.lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: this.lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(this.lexer.yytext);\n            lstack.push(this.lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = this.lexer.yyleng;\n                yytext = this.lexer.yytext;\n                yylineno = this.lexer.yylineno;\n                yyloc = this.lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                this.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.2.1 */\nvar lexer = (function(){\nvar lexer = {\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input) {\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\n\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip whitespace */\nbreak;\ncase 1:return 12;\nbreak;\ncase 2:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 11;\nbreak;\ncase 3:return 12;\nbreak;\ncase 4:return 12;\nbreak;\ncase 5:return 'bar';\nbreak;\ncase 6:return 13;\nbreak;\ncase 7:return 14;\nbreak;\ncase 8:return 15;\nbreak;\ncase 9:return 16;\nbreak;\ncase 10:return 7;\nbreak;\ncase 11:return 17;\nbreak;\ncase 12:return 5;\nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:([a-zA-Z][a-zA-Z0-9_-]*))/,/^(?:\\[([a-zA-Z][a-zA-Z0-9_-]*)\\])/,/^(?:'[^']*')/,/^(?:\\.)/,/^(?:bar\\b)/,/^(?:\\()/,/^(?:\\))/,/^(?:\\*)/,/^(?:\\?)/,/^(?:\\|)/,/^(?:\\+)/,/^(?:$)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12],\"inclusive\":true}}\n};\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = ebnf;\nexports.Parser = ebnf.Parser;\nexports.parse = function () { return ebnf.parse.apply(ebnf, arguments); };\nexports.main = function commonjsMain(args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":107,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":108,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":109,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":110,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":111,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":112,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":113,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":114,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":115,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":116,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":117,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":118,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":119,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":120,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":121,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":122,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":123,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":124,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":125,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":126,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":127,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":128,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":129,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":130,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":131,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":132,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":133,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":134,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":135,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":136,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":137,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":138,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":139,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":140,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":141,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":142,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":143,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":144,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":145,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":146,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":147,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":148,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":149,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":150,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":151,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":152,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":153,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":154,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":155,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":156,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":157,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":158,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":159,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":160,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":161,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":162,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":163,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":164,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":165,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":166,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":167,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":168,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":169,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":170,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":171,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":172,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":173,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":174,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":175,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":176,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":177,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":178,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":179,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":180,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":181,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":182,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":183,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":184,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":185,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":186,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":187,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":188,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":189,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":190,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":191,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":192,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":193,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":194,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":195,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":196,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":197,"column":0},"generated":{"line":198,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":198,"column":0},"generated":{"line":199,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":199,"column":0},"generated":{"line":200,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":200,"column":0},"generated":{"line":201,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":201,"column":0},"generated":{"line":202,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":202,"column":0},"generated":{"line":203,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":203,"column":0},"generated":{"line":204,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":204,"column":0},"generated":{"line":205,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":205,"column":0},"generated":{"line":206,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":206,"column":0},"generated":{"line":207,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":207,"column":0},"generated":{"line":208,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":208,"column":0},"generated":{"line":209,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":209,"column":0},"generated":{"line":210,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":210,"column":0},"generated":{"line":211,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":211,"column":0},"generated":{"line":212,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":212,"column":0},"generated":{"line":213,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":213,"column":0},"generated":{"line":214,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":214,"column":0},"generated":{"line":215,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":215,"column":0},"generated":{"line":216,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":216,"column":0},"generated":{"line":217,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":217,"column":0},"generated":{"line":218,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":218,"column":0},"generated":{"line":219,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":219,"column":0},"generated":{"line":220,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":220,"column":0},"generated":{"line":221,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":221,"column":0},"generated":{"line":222,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":222,"column":0},"generated":{"line":223,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":223,"column":0},"generated":{"line":224,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":224,"column":0},"generated":{"line":225,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":225,"column":0},"generated":{"line":226,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":226,"column":0},"generated":{"line":227,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":227,"column":0},"generated":{"line":228,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":228,"column":0},"generated":{"line":229,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":229,"column":0},"generated":{"line":230,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":230,"column":0},"generated":{"line":231,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":231,"column":0},"generated":{"line":232,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":232,"column":0},"generated":{"line":233,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":233,"column":0},"generated":{"line":234,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":234,"column":0},"generated":{"line":235,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":235,"column":0},"generated":{"line":236,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":236,"column":0},"generated":{"line":237,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":237,"column":0},"generated":{"line":238,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":238,"column":0},"generated":{"line":239,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":239,"column":0},"generated":{"line":240,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":240,"column":0},"generated":{"line":241,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":241,"column":0},"generated":{"line":242,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":242,"column":0},"generated":{"line":243,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":243,"column":0},"generated":{"line":244,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":244,"column":0},"generated":{"line":245,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":245,"column":0},"generated":{"line":246,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":246,"column":0},"generated":{"line":247,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":247,"column":0},"generated":{"line":248,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":248,"column":0},"generated":{"line":249,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":249,"column":0},"generated":{"line":250,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":250,"column":0},"generated":{"line":251,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":251,"column":0},"generated":{"line":252,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":252,"column":0},"generated":{"line":253,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":253,"column":0},"generated":{"line":254,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":254,"column":0},"generated":{"line":255,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":255,"column":0},"generated":{"line":256,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":256,"column":0},"generated":{"line":257,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":257,"column":0},"generated":{"line":258,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":258,"column":0},"generated":{"line":259,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":259,"column":0},"generated":{"line":260,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":260,"column":0},"generated":{"line":261,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":261,"column":0},"generated":{"line":262,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":262,"column":0},"generated":{"line":263,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":263,"column":0},"generated":{"line":264,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":264,"column":0},"generated":{"line":265,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":265,"column":0},"generated":{"line":266,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":266,"column":0},"generated":{"line":267,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":267,"column":0},"generated":{"line":268,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":268,"column":0},"generated":{"line":269,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":269,"column":0},"generated":{"line":270,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":270,"column":0},"generated":{"line":271,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":271,"column":0},"generated":{"line":272,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":272,"column":0},"generated":{"line":273,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":273,"column":0},"generated":{"line":274,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":274,"column":0},"generated":{"line":275,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":275,"column":0},"generated":{"line":276,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":276,"column":0},"generated":{"line":277,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":277,"column":0},"generated":{"line":278,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":278,"column":0},"generated":{"line":279,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":279,"column":0},"generated":{"line":280,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":280,"column":0},"generated":{"line":281,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":281,"column":0},"generated":{"line":282,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":282,"column":0},"generated":{"line":283,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":283,"column":0},"generated":{"line":284,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":284,"column":0},"generated":{"line":285,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":285,"column":0},"generated":{"line":286,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":286,"column":0},"generated":{"line":287,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":287,"column":0},"generated":{"line":288,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":288,"column":0},"generated":{"line":289,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":289,"column":0},"generated":{"line":290,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":290,"column":0},"generated":{"line":291,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":291,"column":0},"generated":{"line":292,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":292,"column":0},"generated":{"line":293,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":293,"column":0},"generated":{"line":294,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":294,"column":0},"generated":{"line":295,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":295,"column":0},"generated":{"line":296,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":296,"column":0},"generated":{"line":297,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":297,"column":0},"generated":{"line":298,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":298,"column":0},"generated":{"line":299,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":299,"column":0},"generated":{"line":300,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":300,"column":0},"generated":{"line":301,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":301,"column":0},"generated":{"line":302,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":302,"column":0},"generated":{"line":303,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":303,"column":0},"generated":{"line":304,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":304,"column":0},"generated":{"line":305,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":305,"column":0},"generated":{"line":306,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":306,"column":0},"generated":{"line":307,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":307,"column":0},"generated":{"line":308,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":308,"column":0},"generated":{"line":309,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":309,"column":0},"generated":{"line":310,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":310,"column":0},"generated":{"line":311,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":311,"column":0},"generated":{"line":312,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":312,"column":0},"generated":{"line":313,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":313,"column":0},"generated":{"line":314,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":314,"column":0},"generated":{"line":315,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":315,"column":0},"generated":{"line":316,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":316,"column":0},"generated":{"line":317,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":317,"column":0},"generated":{"line":318,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":318,"column":0},"generated":{"line":319,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":319,"column":0},"generated":{"line":320,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":320,"column":0},"generated":{"line":321,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":321,"column":0},"generated":{"line":322,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":322,"column":0},"generated":{"line":323,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":323,"column":0},"generated":{"line":324,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":324,"column":0},"generated":{"line":325,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":325,"column":0},"generated":{"line":326,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":326,"column":0},"generated":{"line":327,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":327,"column":0},"generated":{"line":328,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":328,"column":0},"generated":{"line":329,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":329,"column":0},"generated":{"line":330,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":330,"column":0},"generated":{"line":331,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":331,"column":0},"generated":{"line":332,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":332,"column":0},"generated":{"line":333,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":333,"column":0},"generated":{"line":334,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":334,"column":0},"generated":{"line":335,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":335,"column":0},"generated":{"line":336,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":336,"column":0},"generated":{"line":337,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":337,"column":0},"generated":{"line":338,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":338,"column":0},"generated":{"line":339,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":339,"column":0},"generated":{"line":340,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":340,"column":0},"generated":{"line":341,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":341,"column":0},"generated":{"line":342,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":342,"column":0},"generated":{"line":343,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":343,"column":0},"generated":{"line":344,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":344,"column":0},"generated":{"line":345,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":345,"column":0},"generated":{"line":346,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":346,"column":0},"generated":{"line":347,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":347,"column":0},"generated":{"line":348,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":348,"column":0},"generated":{"line":349,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":349,"column":0},"generated":{"line":350,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":350,"column":0},"generated":{"line":351,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":351,"column":0},"generated":{"line":352,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":352,"column":0},"generated":{"line":353,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":353,"column":0},"generated":{"line":354,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":354,"column":0},"generated":{"line":355,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":355,"column":0},"generated":{"line":356,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":356,"column":0},"generated":{"line":357,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":357,"column":0},"generated":{"line":358,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":358,"column":0},"generated":{"line":359,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":359,"column":0},"generated":{"line":360,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":360,"column":0},"generated":{"line":361,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":361,"column":0},"generated":{"line":362,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":362,"column":0},"generated":{"line":363,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":363,"column":0},"generated":{"line":364,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":364,"column":0},"generated":{"line":365,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":365,"column":0},"generated":{"line":366,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":366,"column":0},"generated":{"line":367,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":367,"column":0},"generated":{"line":368,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":368,"column":0},"generated":{"line":369,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":369,"column":0},"generated":{"line":370,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":370,"column":0},"generated":{"line":371,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":371,"column":0},"generated":{"line":372,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":372,"column":0},"generated":{"line":373,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":373,"column":0},"generated":{"line":374,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":374,"column":0},"generated":{"line":375,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":375,"column":0},"generated":{"line":376,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":376,"column":0},"generated":{"line":377,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":377,"column":0},"generated":{"line":378,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":378,"column":0},"generated":{"line":379,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":379,"column":0},"generated":{"line":380,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":380,"column":0},"generated":{"line":381,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":381,"column":0},"generated":{"line":382,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":382,"column":0},"generated":{"line":383,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":383,"column":0},"generated":{"line":384,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":384,"column":0},"generated":{"line":385,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":385,"column":0},"generated":{"line":386,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":386,"column":0},"generated":{"line":387,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":387,"column":0},"generated":{"line":388,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":388,"column":0},"generated":{"line":389,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":389,"column":0},"generated":{"line":390,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":390,"column":0},"generated":{"line":391,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":391,"column":0},"generated":{"line":392,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":392,"column":0},"generated":{"line":393,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":393,"column":0},"generated":{"line":394,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":394,"column":0},"generated":{"line":395,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":395,"column":0},"generated":{"line":396,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":396,"column":0},"generated":{"line":397,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":397,"column":0},"generated":{"line":398,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":398,"column":0},"generated":{"line":399,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":399,"column":0},"generated":{"line":400,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":400,"column":0},"generated":{"line":401,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":401,"column":0},"generated":{"line":402,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":402,"column":0},"generated":{"line":403,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":403,"column":0},"generated":{"line":404,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":404,"column":0},"generated":{"line":405,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":405,"column":0},"generated":{"line":406,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":406,"column":0},"generated":{"line":407,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":407,"column":0},"generated":{"line":408,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":408,"column":0},"generated":{"line":409,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":409,"column":0},"generated":{"line":410,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":410,"column":0},"generated":{"line":411,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":411,"column":0},"generated":{"line":412,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":412,"column":0},"generated":{"line":413,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":413,"column":0},"generated":{"line":414,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":414,"column":0},"generated":{"line":415,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":415,"column":0},"generated":{"line":416,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":416,"column":0},"generated":{"line":417,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":417,"column":0},"generated":{"line":418,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":418,"column":0},"generated":{"line":419,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":419,"column":0},"generated":{"line":420,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":420,"column":0},"generated":{"line":421,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":421,"column":0},"generated":{"line":422,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":422,"column":0},"generated":{"line":423,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":423,"column":0},"generated":{"line":424,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":424,"column":0},"generated":{"line":425,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":425,"column":0},"generated":{"line":426,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":426,"column":0},"generated":{"line":427,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":427,"column":0},"generated":{"line":428,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":428,"column":0},"generated":{"line":429,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":429,"column":0},"generated":{"line":430,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":430,"column":0},"generated":{"line":431,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":431,"column":0},"generated":{"line":432,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":432,"column":0},"generated":{"line":433,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":433,"column":0},"generated":{"line":434,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":434,"column":0},"generated":{"line":435,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":435,"column":0},"generated":{"line":436,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":436,"column":0},"generated":{"line":437,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":437,"column":0},"generated":{"line":438,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":438,"column":0},"generated":{"line":439,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":439,"column":0},"generated":{"line":440,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":440,"column":0},"generated":{"line":441,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":441,"column":0},"generated":{"line":442,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":442,"column":0},"generated":{"line":443,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":443,"column":0},"generated":{"line":444,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":444,"column":0},"generated":{"line":445,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":445,"column":0},"generated":{"line":446,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":446,"column":0},"generated":{"line":447,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":447,"column":0},"generated":{"line":448,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":448,"column":0},"generated":{"line":449,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":449,"column":0},"generated":{"line":450,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":450,"column":0},"generated":{"line":451,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":451,"column":0},"generated":{"line":452,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":452,"column":0},"generated":{"line":453,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":453,"column":0},"generated":{"line":454,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":454,"column":0},"generated":{"line":455,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":455,"column":0},"generated":{"line":456,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":456,"column":0},"generated":{"line":457,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":457,"column":0},"generated":{"line":458,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":458,"column":0},"generated":{"line":459,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":459,"column":0},"generated":{"line":460,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":460,"column":0},"generated":{"line":461,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":461,"column":0},"generated":{"line":462,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":462,"column":0},"generated":{"line":463,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":463,"column":0},"generated":{"line":464,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":464,"column":0},"generated":{"line":465,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":465,"column":0},"generated":{"line":466,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":466,"column":0},"generated":{"line":467,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":467,"column":0},"generated":{"line":468,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":468,"column":0},"generated":{"line":469,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":469,"column":0},"generated":{"line":470,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":470,"column":0},"generated":{"line":471,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":471,"column":0},"generated":{"line":472,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":472,"column":0},"generated":{"line":473,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":473,"column":0},"generated":{"line":474,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":474,"column":0},"generated":{"line":475,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":475,"column":0},"generated":{"line":476,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":476,"column":0},"generated":{"line":477,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":477,"column":0},"generated":{"line":478,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":478,"column":0},"generated":{"line":479,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":479,"column":0},"generated":{"line":480,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":480,"column":0},"generated":{"line":481,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":481,"column":0},"generated":{"line":482,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":482,"column":0},"generated":{"line":483,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":483,"column":0},"generated":{"line":484,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":484,"column":0},"generated":{"line":485,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":485,"column":0},"generated":{"line":486,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":486,"column":0},"generated":{"line":487,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":487,"column":0},"generated":{"line":488,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":488,"column":0},"generated":{"line":489,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":489,"column":0},"generated":{"line":490,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":490,"column":0},"generated":{"line":491,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":491,"column":0},"generated":{"line":492,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":492,"column":0},"generated":{"line":493,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":493,"column":0},"generated":{"line":494,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":494,"column":0},"generated":{"line":495,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":495,"column":0},"generated":{"line":496,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":496,"column":0},"generated":{"line":497,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":497,"column":0},"generated":{"line":498,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":498,"column":0},"generated":{"line":499,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":499,"column":0},"generated":{"line":500,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":500,"column":0},"generated":{"line":501,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":501,"column":0},"generated":{"line":502,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":502,"column":0},"generated":{"line":503,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":503,"column":0},"generated":{"line":504,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":504,"column":0},"generated":{"line":505,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":505,"column":0},"generated":{"line":506,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":506,"column":0},"generated":{"line":507,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":507,"column":0},"generated":{"line":508,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":508,"column":0},"generated":{"line":509,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":509,"column":0},"generated":{"line":510,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":510,"column":0},"generated":{"line":511,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":511,"column":0},"generated":{"line":512,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":512,"column":0},"generated":{"line":513,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":513,"column":0},"generated":{"line":514,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":514,"column":0},"generated":{"line":515,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":515,"column":0},"generated":{"line":516,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":516,"column":0},"generated":{"line":517,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":517,"column":0},"generated":{"line":518,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":518,"column":0},"generated":{"line":519,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":519,"column":0},"generated":{"line":520,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":520,"column":0},"generated":{"line":521,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":521,"column":0},"generated":{"line":522,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":522,"column":0},"generated":{"line":523,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":523,"column":0},"generated":{"line":524,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":524,"column":0},"generated":{"line":525,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":525,"column":0},"generated":{"line":526,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":526,"column":0},"generated":{"line":527,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":527,"column":0},"generated":{"line":528,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":528,"column":0},"generated":{"line":529,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":529,"column":0},"generated":{"line":530,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":530,"column":0},"generated":{"line":531,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":531,"column":0},"generated":{"line":532,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":532,"column":0},"generated":{"line":533,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":533,"column":0},"generated":{"line":534,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":534,"column":0},"generated":{"line":535,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":535,"column":0},"generated":{"line":536,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":536,"column":0},"generated":{"line":537,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":537,"column":0},"generated":{"line":538,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":538,"column":0},"generated":{"line":539,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":539,"column":0},"generated":{"line":540,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":540,"column":0},"generated":{"line":541,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":541,"column":0},"generated":{"line":542,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":542,"column":0},"generated":{"line":543,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":543,"column":0},"generated":{"line":544,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":544,"column":0},"generated":{"line":545,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":545,"column":0},"generated":{"line":546,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":546,"column":0},"generated":{"line":547,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":547,"column":0},"generated":{"line":548,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":548,"column":0},"generated":{"line":549,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":549,"column":0},"generated":{"line":550,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":550,"column":0},"generated":{"line":551,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":551,"column":0},"generated":{"line":552,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":552,"column":0},"generated":{"line":553,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":553,"column":0},"generated":{"line":554,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":554,"column":0},"generated":{"line":555,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":555,"column":0},"generated":{"line":556,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":556,"column":0},"generated":{"line":557,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":557,"column":0},"generated":{"line":558,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":558,"column":0},"generated":{"line":559,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":559,"column":0},"generated":{"line":560,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":560,"column":0},"generated":{"line":561,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":561,"column":0},"generated":{"line":562,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":562,"column":0},"generated":{"line":563,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":563,"column":0},"generated":{"line":564,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":564,"column":0},"generated":{"line":565,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":565,"column":0},"generated":{"line":566,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":566,"column":0},"generated":{"line":567,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":567,"column":0},"generated":{"line":568,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":568,"column":0},"generated":{"line":569,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":569,"column":0},"generated":{"line":570,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":570,"column":0},"generated":{"line":571,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":571,"column":0},"generated":{"line":572,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":572,"column":0},"generated":{"line":573,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":573,"column":0},"generated":{"line":574,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":574,"column":0},"generated":{"line":575,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":575,"column":0},"generated":{"line":576,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":576,"column":0},"generated":{"line":577,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":577,"column":0},"generated":{"line":578,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":578,"column":0},"generated":{"line":579,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":579,"column":0},"generated":{"line":580,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":580,"column":0},"generated":{"line":581,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":581,"column":0},"generated":{"line":582,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":582,"column":0},"generated":{"line":583,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":583,"column":0},"generated":{"line":584,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":584,"column":0},"generated":{"line":585,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":585,"column":0},"generated":{"line":586,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":586,"column":0},"generated":{"line":587,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":587,"column":0},"generated":{"line":588,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":588,"column":0},"generated":{"line":589,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":589,"column":0},"generated":{"line":590,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":590,"column":0},"generated":{"line":591,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":591,"column":0},"generated":{"line":592,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":592,"column":0},"generated":{"line":593,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":593,"column":0},"generated":{"line":594,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":594,"column":0},"generated":{"line":595,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":595,"column":0},"generated":{"line":596,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":596,"column":0},"generated":{"line":597,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":597,"column":0},"generated":{"line":598,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":598,"column":0},"generated":{"line":599,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":599,"column":0},"generated":{"line":600,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":600,"column":0},"generated":{"line":601,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":601,"column":0},"generated":{"line":602,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":602,"column":0},"generated":{"line":603,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":603,"column":0},"generated":{"line":604,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":604,"column":0},"generated":{"line":605,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":605,"column":0},"generated":{"line":606,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":606,"column":0},"generated":{"line":607,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":607,"column":0},"generated":{"line":608,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":608,"column":0},"generated":{"line":609,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":609,"column":0},"generated":{"line":610,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":610,"column":0},"generated":{"line":611,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":611,"column":0},"generated":{"line":612,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":612,"column":0},"generated":{"line":613,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":613,"column":0},"generated":{"line":614,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":614,"column":0},"generated":{"line":615,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":615,"column":0},"generated":{"line":616,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":616,"column":0},"generated":{"line":617,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":617,"column":0},"generated":{"line":618,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":618,"column":0},"generated":{"line":619,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":619,"column":0},"generated":{"line":620,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":620,"column":0},"generated":{"line":621,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":621,"column":0},"generated":{"line":622,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":622,"column":0},"generated":{"line":623,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":623,"column":0},"generated":{"line":624,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":624,"column":0},"generated":{"line":625,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":625,"column":0},"generated":{"line":626,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":626,"column":0},"generated":{"line":627,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":627,"column":0},"generated":{"line":628,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":628,"column":0},"generated":{"line":629,"column":0}},{"source":"node_modules/ebnf-parser/transform-parser.js","original":{"line":629,"column":0},"generated":{"line":630,"column":0}}],"sources":{"node_modules/ebnf-parser/transform-parser.js":"/* parser generated by jison 0.4.11 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar ebnf = (function(){\nvar parser = {trace: function trace() { },\nyy: {},\nsymbols_: {\"error\":2,\"production\":3,\"handle\":4,\"EOF\":5,\"handle_list\":6,\"|\":7,\"expression_suffix\":8,\"expression\":9,\"suffix\":10,\"ALIAS\":11,\"symbol\":12,\"(\":13,\")\":14,\"*\":15,\"?\":16,\"+\":17,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",5:\"EOF\",7:\"|\",11:\"ALIAS\",12:\"symbol\",13:\"(\",14:\")\",15:\"*\",16:\"?\",17:\"+\"},\nproductions_: [0,[3,2],[6,1],[6,3],[4,0],[4,2],[8,3],[8,2],[9,1],[9,3],[10,0],[10,1],[10,1],[10,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1: return $$[$0-1]; \nbreak;\ncase 2: this.$ = [$$[$0]]; \nbreak;\ncase 3: $$[$0-2].push($$[$0]); \nbreak;\ncase 4: this.$ = []; \nbreak;\ncase 5: $$[$0-1].push($$[$0]); \nbreak;\ncase 6: this.$ = ['xalias', $$[$0-1], $$[$0-2], $$[$0]]; \nbreak;\ncase 7: if ($$[$0]) this.$ = [$$[$0], $$[$0-1]]; else this.$ = $$[$0-1]; \nbreak;\ncase 8: this.$ = ['symbol', $$[$0]]; \nbreak;\ncase 9: this.$ = ['()', $$[$0-1]]; \nbreak;\n}\n},\ntable: [{3:1,4:2,5:[2,4],12:[2,4],13:[2,4]},{1:[3]},{5:[1,3],8:4,9:5,12:[1,6],13:[1,7]},{1:[2,1]},{5:[2,5],7:[2,5],12:[2,5],13:[2,5],14:[2,5]},{5:[2,10],7:[2,10],10:8,11:[2,10],12:[2,10],13:[2,10],14:[2,10],15:[1,9],16:[1,10],17:[1,11]},{5:[2,8],7:[2,8],11:[2,8],12:[2,8],13:[2,8],14:[2,8],15:[2,8],16:[2,8],17:[2,8]},{4:13,6:12,7:[2,4],12:[2,4],13:[2,4],14:[2,4]},{5:[2,7],7:[2,7],11:[1,14],12:[2,7],13:[2,7],14:[2,7]},{5:[2,11],7:[2,11],11:[2,11],12:[2,11],13:[2,11],14:[2,11]},{5:[2,12],7:[2,12],11:[2,12],12:[2,12],13:[2,12],14:[2,12]},{5:[2,13],7:[2,13],11:[2,13],12:[2,13],13:[2,13],14:[2,13]},{7:[1,16],14:[1,15]},{7:[2,2],8:4,9:5,12:[1,6],13:[1,7],14:[2,2]},{5:[2,6],7:[2,6],12:[2,6],13:[2,6],14:[2,6]},{5:[2,9],7:[2,9],11:[2,9],12:[2,9],13:[2,9],14:[2,9],15:[2,9],16:[2,9],17:[2,9]},{4:17,7:[2,4],12:[2,4],13:[2,4],14:[2,4]},{7:[2,3],8:4,9:5,12:[1,6],13:[1,7],14:[2,3]}],\ndefaultActions: {3:[2,1]},\nparseError: function parseError(str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        throw new Error(str);\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    this.lexer.setInput(input);\n    this.lexer.yy = this.yy;\n    this.yy.lexer = this.lexer;\n    this.yy.parser = this;\n    if (typeof this.lexer.yylloc == 'undefined') {\n        this.lexer.yylloc = {};\n    }\n    var yyloc = this.lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = this.lexer.options && this.lexer.options.ranges;\n    if (typeof this.yy.parseError === 'function') {\n        this.parseError = this.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    function lex() {\n        var token;\n        token = self.lexer.lex() || EOF;\n        if (typeof token !== 'number') {\n            token = self.symbols_[token] || token;\n        }\n        return token;\n    }\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (this.lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + this.lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: this.lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: this.lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(this.lexer.yytext);\n            lstack.push(this.lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = this.lexer.yyleng;\n                yytext = this.lexer.yytext;\n                yylineno = this.lexer.yylineno;\n                yyloc = this.lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                this.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.2.1 */\nvar lexer = (function(){\nvar lexer = {\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input) {\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function (match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex() {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin(condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState() {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules() {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState(n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState(condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\n\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip whitespace */\nbreak;\ncase 1:return 12;\nbreak;\ncase 2:yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 11;\nbreak;\ncase 3:return 12;\nbreak;\ncase 4:return 12;\nbreak;\ncase 5:return 'bar';\nbreak;\ncase 6:return 13;\nbreak;\ncase 7:return 14;\nbreak;\ncase 8:return 15;\nbreak;\ncase 9:return 16;\nbreak;\ncase 10:return 7;\nbreak;\ncase 11:return 17;\nbreak;\ncase 12:return 5;\nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:([a-zA-Z][a-zA-Z0-9_-]*))/,/^(?:\\[([a-zA-Z][a-zA-Z0-9_-]*)\\])/,/^(?:'[^']*')/,/^(?:\\.)/,/^(?:bar\\b)/,/^(?:\\()/,/^(?:\\))/,/^(?:\\*)/,/^(?:\\?)/,/^(?:\\|)/,/^(?:\\+)/,/^(?:$)/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12],\"inclusive\":true}}\n};\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\n\nif (typeof require !== 'undefined' && typeof exports !== 'undefined') {\nexports.parser = ebnf;\nexports.Parser = ebnf.Parser;\nexports.parse = function () { return ebnf.parse.apply(ebnf, arguments); };\nexports.main = function commonjsMain(args) {\n    if (!args[1]) {\n        console.log('Usage: '+args[0]+' FILE');\n        process.exit(1);\n    }\n    var source = require('fs').readFileSync(require('path').normalize(args[1]), \"utf8\");\n    return exports.parser.parse(source);\n};\nif (typeof module !== 'undefined' && require.main === module) {\n  exports.main(process.argv.slice(1));\n}\n}"},"lineCount":630}},"error":null,"hash":"95685844253d7679c89b678d87a340cf","cacheData":{"env":{}}}